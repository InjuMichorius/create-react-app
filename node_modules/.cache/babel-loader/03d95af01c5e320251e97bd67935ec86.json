{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nfunction useLocalStorageData() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [imageId, setImageId] = useState('');\n  useEffect(() => {\n    // Fetch points from localStorage when the component mounts\n    const storedPoints = localStorage.getItem('points');\n    if (storedPoints) {\n      setPoints(parseInt(storedPoints)); // Convert to integer\n    }\n\n    // Fetch image-id from localStorage when the component mounts\n    const storedImageId = localStorage.getItem('image-id');\n    if (storedImageId) {\n      setImageId(storedImageId);\n    }\n\n    // Listen for changes to localStorage points\n    const handlePointsChange = () => {\n      const updatedPoints = localStorage.getItem('points');\n      if (updatedPoints) {\n        setPoints(parseInt(updatedPoints)); // Update points state\n      }\n    };\n\n    // Listen for changes to localStorage image-id\n    const handleImageIdChange = () => {\n      const updatedImageId = localStorage.getItem('image-id');\n      console.log('Image ID changed:', updatedImageId); // Debugging log\n      if (updatedImageId) {\n        setImageId(updatedImageId); // Update imageId state\n      }\n    };\n\n    window.addEventListener('storage', handlePointsChange);\n    window.addEventListener('storage', handleImageIdChange);\n    console.log('Rendering with imageId:', imageId); // Debugging log\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('storage', handlePointsChange);\n      window.removeEventListener('storage', handleImageIdChange);\n    };\n  }); // Empty dependency array ensures useEffect runs only once on mount\n\n  return {\n    points,\n    imageId\n  };\n}\n_s(useLocalStorageData, \"krtm9TpM+vWRLKzfky9naVpVFXE=\");\nexport default useLocalStorageData;","map":{"version":3,"names":["useState","useEffect","useLocalStorageData","points","setPoints","imageId","setImageId","storedPoints","localStorage","getItem","parseInt","storedImageId","handlePointsChange","updatedPoints","handleImageIdChange","updatedImageId","console","log","window","addEventListener","removeEventListener"],"sources":["/Users/inju/temp/create-react-app/src/hooks/useLocalStorageData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useLocalStorageData() {\n  const [points, setPoints] = useState(0);\n  const [imageId, setImageId] = useState('');\n\n  useEffect(() => {\n    // Fetch points from localStorage when the component mounts\n    const storedPoints = localStorage.getItem('points');\n    if (storedPoints) {\n      setPoints(parseInt(storedPoints)); // Convert to integer\n    }\n\n    // Fetch image-id from localStorage when the component mounts\n    const storedImageId = localStorage.getItem('image-id');\n    if (storedImageId) {\n      setImageId(storedImageId);\n    }\n\n    // Listen for changes to localStorage points\n    const handlePointsChange = () => {\n      const updatedPoints = localStorage.getItem('points');\n      if (updatedPoints) {\n        setPoints(parseInt(updatedPoints)); // Update points state\n      }\n    };\n\n    // Listen for changes to localStorage image-id\n    const handleImageIdChange = () => {\n      const updatedImageId = localStorage.getItem('image-id');\n      console.log('Image ID changed:', updatedImageId); // Debugging log\n      if (updatedImageId) {\n        setImageId(updatedImageId); // Update imageId state\n      }\n    };\n\n    window.addEventListener('storage', handlePointsChange);\n    window.addEventListener('storage', handleImageIdChange);\n    console.log('Rendering with imageId:', imageId); // Debugging log\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('storage', handlePointsChange);\n      window.removeEventListener('storage', handleImageIdChange);\n    };\n  }); // Empty dependency array ensures useEffect runs only once on mount\n\n  return { points, imageId };\n}\n\nexport default useLocalStorageData;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,mBAAmB,GAAG;EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMM,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACnD,IAAIF,YAAY,EAAE;MAChBH,SAAS,CAACM,QAAQ,CAACH,YAAY,CAAC,CAAC,CAAC,CAAC;IACrC;;IAEA;IACA,MAAMI,aAAa,GAAGH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,IAAIE,aAAa,EAAE;MACjBL,UAAU,CAACK,aAAa,CAAC;IAC3B;;IAEA;IACA,MAAMC,kBAAkB,GAAG,MAAM;MAC/B,MAAMC,aAAa,GAAGL,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MACpD,IAAII,aAAa,EAAE;QACjBT,SAAS,CAACM,QAAQ,CAACG,aAAa,CAAC,CAAC,CAAC,CAAC;MACtC;IACF,CAAC;;IAED;IACA,MAAMC,mBAAmB,GAAG,MAAM;MAChC,MAAMC,cAAc,GAAGP,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MACvDO,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,cAAc,CAAC,CAAC,CAAC;MAClD,IAAIA,cAAc,EAAE;QAClBT,UAAU,CAACS,cAAc,CAAC,CAAC,CAAC;MAC9B;IACF,CAAC;;IAEDG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEP,kBAAkB,CAAC;IACtDM,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEL,mBAAmB,CAAC;IACvDE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEZ,OAAO,CAAC,CAAC,CAAC;;IAEjD;IACA,OAAO,MAAM;MACXa,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAER,kBAAkB,CAAC;MACzDM,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEN,mBAAmB,CAAC;IAC5D,CAAC;EACH,CAAC,CAAC,CAAC,CAAC;;EAEJ,OAAO;IAAEX,MAAM;IAAEE;EAAQ,CAAC;AAC5B;AAAC,GA9CQH,mBAAmB;AAgD5B,eAAeA,mBAAmB"},"metadata":{},"sourceType":"module"}